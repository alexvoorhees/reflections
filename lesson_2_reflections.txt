What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository you create a .git folder containing the metadata git needs.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is a git-specific space where things can be added or reset without affecting real files.
The name suggests it lets you arrange see and interact with files more cleanly.

How can you use the staging area to make sure you have one commit per logical
change?

You can double check the code that differs between the working document and the most recent
commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches would allow you to try multiple variations on a core project simultaneously.

How do the diagrams help you visualize the branch structure?

Diagrams allow you to follow the different chains of commits without losing track of parents.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

By merging two branches together git keeps the common denominator text of both commits
along with whatever new code is added, minus the old code that was deleted. We represent
it as we do because it contains information about both original branches, thus it has two
parents.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
