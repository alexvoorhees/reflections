When would you want to use a remote repository rather than keeping all your work
local?

Using a remote repository would allow you to exchange code with coworkers or
between multiple computers that you had access to. It'd also be insurance in
case of hardware failure. The big drawback would be that you'd be unable to
access the code without internet signal, but that's a rare problem these days.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

The nature of coding is that files are frequently in states of disorder or
testing. By forcing users to decide on specific points in time for changes
to be pulled or pushed, GitHub ensures that every save point can be tied
to a logical change rather than to random chronological markers.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Forks are a way to clone a GitHub repository within GitHub and create an
alternate version of it, while still crediting the creator(s). Clones are
exact copies of repositories, whether local or online. And branches are
offshooting commits within a single repository. If working purely locally,
you'd use branches. If you were needing to copy large swaths of code you'd
use clones. And if you wanted to credit another user, whose repository you
could not access...or if you wanted to make a variation on a GitHubg 
repository without altering the original, you'd make a fork.

What is the benefit of having a copy of the last known state of the remote
stored locally?

Having the last known state stored locally allows you to compare code with
a relatively recent cloud-hosted source without having to access the network
directly. It also allows you to have a consistent reference point, so that
the thing you are comparing your code to is not changing on its own between
your comparisons.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

I'd probably use some form of google docs or flash drives. Saving files in
exactly the appropriate state would be much more difficult and it would be
harder to let multiple parties access and collaborate on the same files.
Overall, it seems like GitHub, or something similar, is essential.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

You'd want to make changes in a seperate branch if you wanted to try a new
feature or were working with a team and multiple people were attempting
to solve problems independently. While it adds a few steps to evolving the
master, it helps to make sure that people don't keep changing the same code
without it being agreed upon beforehand.
